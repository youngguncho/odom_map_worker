viewer {
    renderers {
        graph {
        renderer_key = "isam2_graph";
        label = "ISam-Graph";
        channel = "ISAM_VIS";
        pfactor_channel = "ISAM_VIS_PFACTOR";
            pltprop {
                # b(blue), r(red), g(green), p(pink), c(cyon), l(lime)
                # "-" (solid line) "." (dotted line)
                # paired input will provide prop for vlink and plink
                node = "k*"; # default = lime dot
                odo  = "b="; # default = blue solid line
                cam   = ["r="];
                cam_plink = ["p:"];
                sonar = ["g="];
                sonar_plink = ["l:"];
                plane = ["y="];
                plane_plink = ["y:"];
                glc = ["g="];
                glc_plink = ["g-"];
            }
        }
        
        isam_apriltag {
            renderer_key = "isam_apriltag";
            label = "Isam_Apriltag";
            isam_channel = "ISAM_VIS";
            image_folder = "/home/perl/tag_images";
            # total tag size (including margins) is 1 foot x 1 foot
            tag_height = 0.3048;
            tag_width = 0.3048;
        }

        compass {
            renderer_key = "compass";
        }
        
        hauv {
            renderer_key = "hauv";
            ship_obj_file = "../../config/viewer/obj_models/7723_MSC_TAKR300.obj";
        }

        hauv_pose_attach {
            renderer_key = "hauv_pose_attach";
            robot_obj_file = "../../config/viewer/obj_models/HAUV-v2.obj";
            manual_sel_channel = "MANUAL_SEL";
        }

        hauv_ship_model {
            renderer_key = "hauv_ship_model";
            offline_mode = 0;
            logdir = "/var/van-processed";
            mesh_num_x = 150;
            mesh_num_y = 150;
            # this is ignored if offline_mode is 0
            # utimelist = "/home/paul/hauv-untex-meshes/seneca-04-27-dive01/utimelist.dat";
        }

        # hauvctrl {
        #     renderer_key = "hauvctrl";
        # }

        vanctrl {
            renderer_key = "vanctrl";
        }

        bot_lcmgl {
            renderer_key = "bot_lcmgl";
            channel = "LCMGL_Sonar";
        }

        status_text {
            renderer_key = "status_text";
            data_sources { # key = lcm_channel
                perllcm_logbook = "HAUV_STATUS";
            }
        }

        pdn {
            renderer_key = "pdn";
        }

        particle_filter {
            renderer_key = "particle_filter";
        }

        bundle_adjust {
            renderer_key = "bundle_adjust";
        }

        # lcmplot {
        #     renderer_key = "plot";
        #     plot_key = "lcmplot";

        #     label = "PDN plot";
        #     init_x = 0;              # in fraction of window (0 to 100) 
        #     init_y = 0;              # in fraction of window (0 to 100)
        #     width = 30;             # in fraction of window (0 to 100)
        #     height = 80;             # in fraction of window (0 to 100)
        #     max_datapts = 10000;    # max per time series

        #     series1 {
        #         channel = "LCMPLOT";
        #         enable = 1;
        #     }
        # }
        
        plan {
            renderer_key = "plan";
        }
        lcmplot {
            renderer_key = "plot";
            plot_key = "lcmplot";
            label = "LCMPLOT Uncertainty";
            
            series1 {
                channel = "LCMPLOT_ROBOT_UNCERTAINTY";
                enable = 1;
            }
        }

    } # renderers
} # viewer

apriltags {
   detections {
      channel_peri = "APRILTAGS_PERI";
      channel_uw = "APRILTAGS_UW";
      tagsize = 0.254;
   }
}

prosilica {
   uw {
      uid = 100815; #GC1380M
      channel = "PROSILICA_M";
      # channel = "PROSILICA_UW";
      x_lr = [0,0,0,0,0,0];

      x_s1c = [0, -0.25, 0, 90, 0, 90];               # camera w.r.t. servo1

      PvAttributes {
         FrameStartTriggerMode = "FixedRate";

         # FOR MANUAL MODE
         #ExposureMode = "Manual";
         #ExposureValue = "5000";
         #GainMode = "Manual";
         #GainValue = "15";
            
         # FOR AUTO MODE
         ExposureMode = "Auto";
         ExposureAutoAlg = "Mean"; 
         ExposureAutoMax = "10000"; #"7500"; 
         ExposureAutoMin = "8"; #default value
         ExposureAutoRate = "90"; #pct of max speed
         ExposureAutoTarget = "50";
         
         GainMode = "Auto";
         GainAutoAlg = "Mean"; #USE Default
         GainAutoMax = "30";
         GainAutoMin = "0";
         GainAutoRate = "100"; #USE Default		

         PixelFormat = "Mono16";
         PacketSize = "1500";
         MulticastEnable = "Off";
         SyncOut1Mode = "Imaging";
         StreamBytesPerSecond = "9949520"; #9949520 ~= 80Mbit
                                           #9052160 = (3.25 fps) * (2785280 bytes/frame @ Mono16)
         BinningX = "1";
         BinningY = "1";

         FrameRate = "2.0";

      } # PvAttributes

      calib_water {
         fc = [1628.521907883988, 1621.328769461367];
         cc = [675.9661065683193, 533.3049458667318];

         #%-- Skew coefficient:
         alpha_c = 0.000000000000000;

         #%-- Distortion coefficients:
         kc = [0.1191747235198005, 0.4110288311153126, 0.001088781095191246, -0.001520548591843375, 0];
         kc_model = "radtan";

         #%-- Focal length uncertainty:
         fc_error = [ 2.635608772644813, 2.602351349007647 ];

         #%-- Principal point uncertainty:
         cc_error = [ 3.867579638801144, 3.926700136008126 ];

         #%-- Skew coefficient uncertainty:
         alpha_c_error = 0.000000000000000;

         #%-- Distortion coefficients uncertainty:
         kc_error = [ 0.009337781621933, 0.091718870932917, 0.001172850013763, 0.001293934986022, 0.000000000000000 ];

         #%-- Image size:
         nx = 1360;
         ny = 1024;
      } # calib_water

      calib_air {
         #%-- Focal length:
         fc = [ 1312.39819625871, 1311.275492652898 ];

         #%-- Principal point:
         cc = [ 686.6087813653711, 563.0495467446156 ];

         #%-- Skew coefficient:
         alpha_c = 0.000000000000000;

         #%-- Distortion coefficients:
         kc = [-0.1105041603990582, 0.149666016202834, 0.007122154555103699, 0.00188271762831092, 0];
         kc_model = "radtan";

         #%-- Focal length uncertainty:
         fc_error = [ 2.527785062737517, 2.555847022708655 ];

         #%-- Principal point uncertainty:
         cc_error = [ 4.674096256020311, 4.208864544968002 ];

         #%-- Skew coefficient uncertainty:
         alpha_c_error = 0.000000000000000;

         #%-- Distortion coefficients uncertainty:
         kc_error = [ 0.004562171508604, 0.013870655372693, 0.000828904679665, 0.000889008723512, 0.000000000000000 ];

         #%-- Image size:
         nx = 1360;
         ny = 1024;
      } #calib_air

   } # uw

   peri {
      uid = 36129; #GC1380M
      channel = "PROSILICA_PERI";
      # channel = "PROSILICA_PERI";
      x_lr = [0,0,0,0,0,0];

      x_vs  = [-0.453, 0.221, -0.457, 150, 0, 90];     # camera w.r.t. vehicle (periscope angle = 60) 

      PvAttributes {
         FrameRate = "2.0";
         FrameStartTriggerMode = "FixedRate";

         # FOR MANUAL MODE
         #ExposureMode = "Manual";
         #ExposureValue = "5000";
         #GainMode = "Manual";
         #GainValue = "15";
            
         # FOR AUTO MODE
         ExposureMode = "Auto";
         ExposureAutoAlg = "Mean"; 
         ExposureAutoMax = "10000"; #"7500"; 
         ExposureAutoMin = "8"; #default value
         ExposureAutoRate = "90"; #pct of max speed
         ExposureAutoTarget = "50";
         
         GainMode = "Auto";
         GainAutoAlg = "Mean"; #USE Default
         GainAutoMax = "30";
         GainAutoMin = "0";
         GainAutoRate = "100"; #USE Default		

         PixelFormat = "Mono16";
         PacketSize = "1500";
         MulticastEnable = "Off";
         SyncOut1Mode = "Imaging";
         StreamBytesPerSecond = "9949520"; #9949520 ~= 80Mbit
                                           #9052160 = (3.25 fps) * (2785280 bytes/frame @ Mono16)
         BinningX = "1";
         BinningY = "1";
      } # PvAttributes

      calib_water {
         #%-- Focal length:
         fc = [ 1639.621332891608, 1634.381251812504 ];

         #%-- Principal point:
         cc = [ 675.5540607394917, 530.1119353597928 ];

         #%-- Skew coefficient:
         alpha_c = 0.000000000000000;

         #%-- Distortion coefficients:
         kc = [0.1266376707016447, 0.4338976657609513, 0.001756479385174403, 0.00156941984900605, 0];
         kc_model = "radtan";

         #%-- Focal length uncertainty:
         fc_error = [ 9.72229373,  9.0629333 ];

         #%-- Principal point uncertainty:
         cc_error = [ 12.51009277,  10.03278706 ];

         #%-- Skew coefficient uncertainty:
         alpha_c_error = 0.000000000000000;

         #%-- Distortion coefficients uncertainty:
         kc_error = [ 0.02290864,  0.19969751,  0.0033517 ,  0.00424184,  0.0        ];

         #%-- Image size:
         nx = 1360;
         ny = 1024;
      } # calib_water

      calib_air {
         #%-- Focal length:
         fc = [ 1283.207797125304, 1280.960394321098 ];

         #%-- Principal point:
         cc = [ 660.3178574824292, 533.0271402708613 ];

         #%-- Skew coefficient:
         alpha_c = 0.000000000000000;

         #%-- Distortion coefficients:
         kc = [-0.1094523148507462, 0.1386437379206868, 0.003451049492963297, 0.0001130209582468966, 0];
         kc_model = "radtan";

         #%-- Focal length uncertainty:
         fc_error = [ 2.527785062737517, 2.555847022708655 ];

         #%-- Principal point uncertainty:
         cc_error = [ 4.674096256020311, 4.208864544968002 ];

         #%-- Skew coefficient uncertainty:
         alpha_c_error = 0.000000000000000;

         #%-- Distortion coefficients uncertainty:
         kc_error = [ 0.004562171508604, 0.013870655372693, 0.000828904679665, 0.000889008723512, 0.000000000000000 ];

         #%-- Image size:
         nx = 1360;
         ny = 1024;
      } #calib_air

   } # peri

} #prosilica

sonar {
    x_vs2 = [0, 0, 0, 0, 0, 0];                  # servo2 (pitch_sonar) w.r.t. vehicle for pitch_sonar=0
    mode {
        imaging   = 0;
        split     = 1;
        halfsplit = 2;
        3dfls     = 3;
    }
} #sonar

dvl {
    x_vs1 = [0, 0, 0, 0, 0, 0];                  # servo1 (pitch_dvl) w.r.t. vehicle for pitch_dvl=0
    x_s1d  = [0, 0, 0, -90, 45, 90];             # dvl w.r.t. vehicle (servo1)

    # JHU (another test data from ayoung)
    #x_vs  = [0.08, 0, 0.294, 1.0957, 182.5241, 45.1222];  # dvl w.r.t. vehicle (servo1)

    # DVL Instrument Transformation Matrix (Down)
    tmatrix = [1.0000,   -1.0000,    0.0000,    0.0000,
               0.0000,    0.0000,   -1.0000,    1.0000,
               0.2887,    0.2887,    0.2887,    0.2887,
               0.7071,    0.7071,   -0.7071,   -0.7071];
      
} # dvl

plane {

    plane_fit {
        # doesn't change because DVL is always (approximately) nadir to ship hull
        first_order_cov = [5.48e-04,  -5.10e-06,   5.81e-05,  -5.10e-06, 5.317e-04,   9.49e-05,   5.81e-05,   9.49e-05, 1.88e-04];
    }
    surface_params {
        chr_radius_azim = 322.0;
        chr_radius_elev = 7.0;
    }
    dvl_factors_frontend {
        resid_thresh = 0.2;
    }
    sameplane_factors {
        sigma_dist = 0.02;     #meters
        sigma_ae = 0.05;        #radians
    }
    sameplane_factors_frontend {
        link_spacing = 10;      # seconds
        norm_dist_thresh = 9;

        at_surface_depth = 0.2; #meters

        # camera mission - less distance between links
        max_dist_btwn_poses = 3.0;

        # sonar mission - more distance between links
        max_dist_btwn_poses = 5.5;

    }
}

cam-client {
    lcm_channels {
        PLINK_CHAN  = "PLINK";      # link proposal channel
        FEAT_CHAN   = "FEATURE";    # feature channel
    } # lcm_channels

    feature_thread {
        ftypes = ["akaze"];                   # ["siftgpu","akaze"]
        #siftgpu_server = "192.168.0.1";      # if not provided, it reaches the server in local machine
    } #feature_thread

}

rtvan {
    # logdir = "/var/van-processed";
    # savedir = "/var/graph-saved";
    logdir = "./van-processed";
    savedir = "./van-processed";    
    cameraUw = "prosilica.uw";
    cameraPeri = "prosilica.peri";
    dualcam = 1;

    imgstep = 1;                                # process images in every "imgstep" when verifying

    feature_thread {
        ftypes = ["siftgpu"];                       # ["cvsurf", "siftgpu", "harris"];
        feat_patch_w = 5;                           # patch size for harris pts (2w+1 x 2w+1)
        #siftgpu_server = "141.212.93.97";          # if not provided, it reaches the server in local machine
        #siftgpu_server = "192.168.0.202";          # if not provided, it reaches the server in local machine
        #siftgpu_server = "10.0.3.107";          # hauv-laptop (or yoshi)
        #surfgpu_server = "141.212.194.236";              # if not provided, it reaches the server in local machine
        use_surfgpu     = 1;                        #If 0, use opencv surf (which is 10x slower than GPU)
    } #feature_thread

    twoview_thread {
        tv_pccs_fudge = 1.0;
        nav_thresh_sigma = 3.0;
        sift_simAB_thres = 0.70;                    # simscore threshold for sift & surf. if 1, no comparison
        harris_simAB_thres = 0.35;                  # simscore threshold for harris patch. if 1, no comparison
        tv_min_npts = 8;                           # min points needed in twoview register
        tv_tri_const_min_dist = -100.0;             # min dist in triangulation constraint [% of the avg offset]
        tv_tri_const_max_dist = 100.0;              # max dist in triangulation constraint [% of the avg offset]
        force_dcs = 1;
    } #twoview_thread

    link_thread {
        use_isamserver = 1;         # use isam server (both cannot be 1)
        min_overlap = 0.1;          # min image overlap percent [%]
        max_overlap = 1.0;          # max image overlap percent [%]
        n_plinks = 3;               # number of links to propose
        add_node_thresh = 0.0;      # min dist to add a node [m]
        Ig_thresh = 0.2;            # information gain thresh (0.0 = no Ig check)
        use_sal_add_node = 0;
        use_manual_plinks = 0;      # load "./plink_manual.list"
    } #link_thread

    slam_thread {
    } #slam_thread

    hauv_thread {# note x,y,z meters r,p,h degrees
        sonar_mode = sonar.mode.imaging;    # imaging / split / halfsplit / 3dfls
    } #hauv_thread

    saliency_thread {
        sal_new_vocab_sim_thresh = 0.5;
        sal_new_vocab_motion_thresh = 1.0;
        S_L_thresh = 0.5;
        S_G_thresh = 0.5;
        sal_depth_thresh = -1.0;
        pub_salmap = 1;                    # saliency map published from rtvan. see isam_inter_thread.
    } # saliency_thread

    post_process {
        save_bathy = 0;                    # writt dvl point cloud
        save_link_info = 0;                # save link info (utimei / utimej / saliency / Ig / verified)
        save_image_bow = 0;
        save_saliency = 0;
        save_vocab = 0;
        selftest_saliency = 0;
    } # post_process

    plot_thread {
        scale = 0.4;
        plot_vice_versa = 0;            # do you want to see motion both of 1 to 2 and 2 to 1 ?
        vis_plot_features = 0;
        vis_plot_scene_prior = 0;
        vis_plot_put_corr = 0;
        vis_plot_search_ellipses = 0;
        vis_plot_in_and_out = 0;
        vis_plot_inliers = 0;
        vis_plot_relpose = 0;
        vis_plot_3pts = 0;
        vis_plot_relpose_3pts = 0;
        vis_plot_summary = 0;
        vis_plot_waitkey = 0;
        vis_manual_corr = 0;
        vis_mdist_plink = 0;
        vis_plot_saliency = 0;
        vis_use_saliency = 0;
    } #plot_thread
    
    channel {
        VAN_OPTIONS_CHANNEL = "VAN_OPTIONS";
        VAN_DVL_BATHY_CHANNEL              = "VAN_DVL_BATHY";
        VAN_DVL_BATHY_VEHICLE_CHANNEL      = "VAN_DVL_BATHY_VEHICLE";
        VAN_DVL_BATHY_SENSOR_CHANNEL       = "VAN_DVL_BATHY_SENSOR";
        VAN_FEATURE_COLLECTION_CHANNEL     = "VAN_FEATURES";
        VAN_WORDS_CHANNEL                  = "VAN_WORDS";
        VAN_PLINK_CHANNEL                  = "VAN_PLINKS";
        VAN_VLINK_CHANNEL                  = "VAN_VLINKS";
        VAN_OPTIONS_CHANNEL                = "VAN_OPTIONS";
        VAN_PLOT_DEBUG_CHANNEL             = "VAN_PLOT_DEBUG";
        VAN_VERIFY_CHANNEL                 = "VAN_VERIFY_LINK";
        VAN_SALIENCY_CHANNEL               = "VAN_SALIENCY";
        VAN_LINK_INFO_CHANNEL              = "VAN_LINK_INFO";
        REQUEST_SALIENCY_CHANNEL           = "REQUEST_SAL";
        RETURN_SALIENCY_CHANNEL            = "RETURN_SAL";
        SALVIS_CHANNEL                     = "VAN_SALVIS";
     }

     hauv {
        VAN_CAMERA_POSE_UW_CHANNEL   = "VAN_CAMERA_POSE_UW";
        VAN_CAMERA_POSE_PERI_CHANNEL = "VAN_CAMERA_POSE_PERI";
        VAN_V2C_POSE_UW_CHANNEL      = "VAN_V2C_POSE_UW";
        VAN_V2C_POSE_PERI_CHANNEL    = "VAN_V2C_POSE_PERI";
        peri_depth_thresh            = 0.25;
     }
} # rtvan

vehicle-client {
    step_size = 1.0;                # interpolation step size
    add_hauv_node_wait_dt = 1.0;    # vehicle-client waits for dt if there is no add node msg
                                    # it automatically drop a node
    odom {
    # odometry noise
        std_xyz = 0.005;  # 5 mm/s
        std_rph = 0.0004; # radians (80 deg/hr)
    }                                

    zpr {
    # observation noise on observables (for roll pitch depth abs measurement)
        std_r = 0.0017; # radian
        std_p = 0.0017;   # radian 
        std_z = 0.01;     # meter
    }

    lcm_channels {
        RTVAN_ADD_NODE_CHANNEL = "ADD_NODE_RTVAN";      #channel that rtvan adds nodes
        SELF_ADD_NODE_CHANNEL  = "ADD_NODE_HAUV";       #FOR TESTING ONLY
        HEARTBEAT_CHANNEL      = "HEARTBEAT_5HZ";       #channel for heartbeat_5hz
    }

}

hauv-client {

    lcm_channels {
        SONAR_ADD_NODE_CHANNEL = "ADD_NODE_SONAR";      #channel that sonar adds nodes
        SELF_ADD_NODE_CHANNEL  = "ADD_NODE_HAUV";       #FOR TESTING ONLY
        HAUV_NVG_CHANNEL       = "HAUV_BS_NVG";
        HAUV_CNV_CHANNEL       = "HAUV_BS_CNV";
        HAUV_RNV_CHANNEL       = "HAUV_BS_RNV";         # is obsolete
        HAUV_RNV_2_CHANNEL     = "HAUV_BS_RNV_2";
        HAUV_GBP_CHANNEL       = "HAUV_PL_GBP";
        HAUV_DIDSON_CHANNEL    = "HAUV_DIDSON_FRAME";
    }

    wp_nav { # waypoint navigation
        wp_depth_thresh        = 2.0;                   # [m] saliency bow / pdn wp calc depth thresh
        GOTO_STATE_CHANNEL     = "WP_GOTO_STATE";
        GOTO_CHANNEL           = "WP_GOTO";
        GOTO_RQ_CHANNEL        = "WP_GOTO_RQ";
        WP_LIST_CHANNEL        = "WP_LIST";             # wp broadcasting for visualization
        SAVE_CMD_CHANNEL       = "SAVE_WP";             # save wp command
        DEL_CMD_CHANNEL        = "DEL_WP";              # delete wp command
        WP_PATH_CHANNEL        = "WP_PATH";
    }
    
    mission { # specify mission type
        IS_HULL_RELATIVE       = 1;     # true for hull-relative, false for seafloor-relative
        IF_SEAFLOOR_IS_DEPTH   = 1;     # if seafloor-relative, true for depth, false for altitude
    }

    anchor_nodes {
        zpr_prior {
             z_stddev = 0.001;     # meters
             p_stddev = 0.00001;     # radians
             r_stddev = 0.00001;     # radians
        }
    }
}

sonar-client {
    propose_link {
        plink_thresh = 1;       # link proposal range [m]
    }
}

isam-server {
    # channel names
    lcm_channels {
        RETURN_ST_CHAN           = "ISAM_RETURN_STATE";
        REQUEST_ST_CHAN          = "ISAM_REQUEST_STATE";
        PROPERTIES_CHAN          = "ISAM_PROPERTIES";
        F_POSE_POSE_CHAN         = "ISAM_F_POSE_POSE";
        F_POSE_POSE_PARTIAL_CHAN = "ISAM_F_POSE_POSE_PARTIAL";
        F_PRIOR_CHAN	         = "ISAM_F_POSE_PARTIAL";
        F_POSE_PARTIAL_CHAN	     = "ISAM_F_POSE_PARTIAL";
        F_PRIOR_MM_CHAN	         = "ISAM_F_PRIOR_MM";
        F_POSE_PLANE_CHAN        = "ISAM_F_POSE_PLANE";
        F_RAYCAST_CHAN           = "ISAM_F_RAYCAST";
        F_PIECEWISE_PLANAR_CHAN  = "ISAM_F_PIECEWISE_PLANAR";
        CMD_CHAN                 = "ISAM_CMD";
        VIS_CHAN                 = "ISAM_VIS";
        RETURN_CHOLMOD_CHAN      = "RETURN_CHOLMOD";
        REQUEST_CHOLMOD_CHAN     = "REQUEST_CHOLMOD";
        REQUEST_USER_DATA_CHAN   = "REQUEST_USER_DATA";
        ANCHOR_NODE_ACK_CHAN     = "ANCHOR_ADD_ACK";
        F_USER_DATA_CHAN         = "ISAM_F_USER_DATA";
        GRAPH_RAW_CHAN           = "ISAM_GRAPH_RAW";
    } # lcm_channels

    # slam properties
    properties {
        max_iterations = 1;      # default 500
        mod_batch      = 100;    # default 100, hull inspection used 50
        verbose        = 1;       # default false
        quiet          = 0;
        method         = "GAUSS_NEWTON"; #GAUSS_NEWTON, LEVENBERG_MARQUARDT or DOG_LEG
    }

    # post processing
    #post_process {
    #    save_cputime = 1;
    #    timing_fname = "cputime.dat";   # cputime
    #    mucov_fname = "mucov.dat";      # mu and cov
    #    graph_fname = "graph.isam";     # isam graph
    #    pc_fname = "pc.dat";            # pose3d collection
    #} # post_process

    vis {
        update_time = 1.0;
    }

    requester_id {
        viewer = 1;
        hauv-client = 2;
        rtvan = 3;
        sonar = 4;
        pdn = 5;
        mss-initial-link = 6;
    }
}

cam-feature {
    image_channel       = "prosilica.uw.channel";
    feature_channel     = "VAN_FEATURES";
    logdir              = "rtvan.logdir";
    ftypes              = "rtvan.feature_thread.ftypes";
    feat_patch_w        = 5;
    #siftgpu_server     = "10.0.3.107";             # if not provided, it reaches the server in local machine
    camera_config_key   = "prosilica.uw";
    camera_calib_key    = "prosilica.uw.calib_water";
}

mesh-server {
    request_channel = "GRIDDATA_REQUEST";
    return_channel  = "GRIDDATA_RETURN";
}

pdn {
    options {
        savepdn = 1;
        update_dt = 5;     # sec
    }

    lcm_channels {
        CVIS_CHANNEL           = "PDN_CVIS";
        #SALVIS_CHANNEL         = "PDN_SALVIS";     # moved salvis pub to rtvan 2013.05.23
        PATH_CHANNEL           = "PDN_PATH";
        WP_CHANNEL             = "PDN_WP";
        PDN_WP_GOTO_RQ_CHANNEL = "PDN_WP_GOTO_RQ";
        RC_CHANNEL             = "PDN_RC";          # reward collection
    }

    path {
        p2p_terminate = 1.0;
        p2p_range = 7.0;        #2.0;
        p2p_maxitr = 1000;
    }

    wps {
        wp_lsal_thresh = 0.6;
        wp_gsal_thresh = 0.6;
        wp_dbscan_min_npts = 5;
        wp_dbscan_eps = 5.0;
        along_track_d = 0.2;
        cross_track_d = 0.5;         # for camera 0.5 sonar 3.0
    }

    reward {
        alpha = 0.75;           # how much weight on uncertainty
        Q = [0.005, 0.005, 0.005, 0.023, 0.023, 0.023];
        R = [1.0, 1.0, 0.1, 0.1, 0.1];
        rp = 0.1;               # DTOR
        z = 0.01;               # meter
        nplink = 3;
        plink_sal_thresh = 0.4;
        Ig_thresh = 7.0;
        S_xy_allow = 0.075;       # 0.25;
        area_target_L = 40.0;   # length
        area_target_H = 9.0;   # height to water surface
        area_target_W = 2.0;   # half of beam
        sfp_width = 1.0;        # sensor foodprint width
        vehicle_speed = 0.3;    # vehicle speed in wp navigation (to scale Q properly)
    }
}

plan {
    lcm_channels {
        HEARTBEAT_CHAN = "HEARTBEAT_1HZ";
        HAUV_BS_MBS_CHAN = "HAUV_BS_MBS";
        ISAM_UDATA_RETURN_CHAN = "ISAM_F_USER_DATA_REPUB";
        COMMAND_CHAN = "PLAN_COMMAND";
        UNCERTAINTY_CHAN = "PLAN_UNCERTAINTY";
        TRACKLINE_CHAN = "PLAN_TRACKLINE";
        SLAM_NODES_CHAN = "PLAN_SLAM_NODES";
        SLAM_WJACOB_CHAN = "PLAN_SLAM_WJACOB";
        SLAM_CHOL_R_CHAN = "PLAN_SLAM_CHOLESKY_FACTOR_R";
        SLAM_LOOKAHEAD_CHAN = "PLAN_SLAM_LOOKAHEAD";
        REVISIT_CHAN = "PLAN_REVISIT";
        GRAPH_CHAN = "PLAN_GRAPH";
        TRAJECTORY_CHAN = "PLAN_TRAJECTORY";
        GP_SALVIS_CHAN = "PLAN_GP_SALVIS";
        UNCERTAINTY_CHAN = "LCMPLOT_ROBOT_UNCERTAINTY";
        WP_GOTO_RQ_CHAN = "WP_GOTO_RQ";
        PLAN_WP_GOTO_RQ_CHAN = "PLAN_WP_GOTO_RQ";
    }
}

van_ctrl {
    CHANNEL = "VAN_CTRL";
}

legacy {
    lcm_channels {
        IFNO_CHANNEL                   = "INFO";
    }
}
