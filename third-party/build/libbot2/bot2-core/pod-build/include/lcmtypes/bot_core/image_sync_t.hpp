/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __bot_core_image_sync_t_hpp__
#define __bot_core_image_sync_t_hpp__


namespace bot_core
{

/**
 * image_sync_t is used by libcam plugins to synchronize playback of a libcam
 * log file with playback of an LCM log file.
 * // The expected usage scenario is when an image stream is recorded to a libcam
 * log file, and a lcm-syncpub unit is in the libcam chain that publishes
 * image_sync_t messages to an LCM network, where they may be logged to the
 * an LCM logfile.
 * // Later, when playing back an LCM log file, the image_sync_t messages can be
 * used by a libcam log playback unit to synchronize its playback of the
 * libcam log file with the LCM log file.
 * // The existence of this message type is largely predicated on the notion that
 * we may not always want full resolution image data in an LCM log file, and
 * may instead store it in a dedicated libcam log file.
 */
class image_sync_t
{
    public:
        int64_t    utime;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "image_sync_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int image_sync_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int image_sync_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int image_sync_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t image_sync_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* image_sync_t::getTypeName()
{
    return "image_sync_t";
}

int image_sync_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int image_sync_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int image_sync_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    return enc_size;
}

int64_t image_sync_t::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0xa686a0e0f882d897LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
