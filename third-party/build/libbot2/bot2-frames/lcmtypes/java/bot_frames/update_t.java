/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_frames;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class update_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String frame;
    public String relative_to;
    public double trans[];
    public double quat[];
 
    public update_t()
    {
        trans = new double[3];
        quat = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe81404582309d273L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_frames.update_t.class))
            return 0L;
 
        classes.add(bot_frames.update_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.frame.length()]; this.frame.getChars(0, this.frame.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.relative_to.length()]; this.relative_to.getChars(0, this.relative_to.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.trans[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.quat[a]); 
        }
 
    }
 
    public update_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public update_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_frames.update_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_frames.update_t o = new bot_frames.update_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.frame = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.relative_to = new String(__strbuf);
 
        this.trans = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.trans[a] = ins.readDouble();
        }
 
        this.quat = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quat[a] = ins.readDouble();
        }
 
    }
 
    public bot_frames.update_t copy()
    {
        bot_frames.update_t outobj = new bot_frames.update_t();
        outobj.utime = this.utime;
 
        outobj.frame = this.frame;
 
        outobj.relative_to = this.relative_to;
 
        outobj.trans = new double[(int) 3];
        System.arraycopy(this.trans, 0, outobj.trans, 0, 3); 
        outobj.quat = new double[(int) 4];
        System.arraycopy(this.quat, 0, outobj.quat, 0, 4); 
        return outobj;
    }
 
}

