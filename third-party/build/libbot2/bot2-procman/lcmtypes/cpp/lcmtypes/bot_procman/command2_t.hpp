/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __bot_procman_command2_t_hpp__
#define __bot_procman_command2_t_hpp__

#include <string>
#include <vector>

namespace bot_procman
{

class command2_t
{
    public:
        /// Executable string
        std::string exec_str;

        std::string command_name;

        std::string group;

        int8_t     auto_respawn;

        int8_t     stop_signal;

        float      stop_time_allowed;

        int32_t    num_options;

        std::vector< std::string > option_names;

        std::vector< std::string > option_values;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "command2_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int command2_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int command2_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int command2_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t command2_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* command2_t::getTypeName()
{
    return "command2_t";
}

int command2_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    char* exec_str_cstr = (char*) this->exec_str.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &exec_str_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* command_name_cstr = (char*) this->command_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &command_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* group_cstr = (char*) this->group.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &group_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->auto_respawn, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->stop_signal, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->stop_time_allowed, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_options, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_options; a0++) {
        char* __cstr = (char*) this->option_names[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->num_options; a0++) {
        char* __cstr = (char*) this->option_values[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int command2_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t __exec_str_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__exec_str_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__exec_str_len__ > maxlen - pos) return -1;
    this->exec_str.assign(((const char*)buf) + offset + pos, __exec_str_len__ - 1);
    pos += __exec_str_len__;

    int32_t __command_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__command_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__command_name_len__ > maxlen - pos) return -1;
    this->command_name.assign(((const char*)buf) + offset + pos, __command_name_len__ - 1);
    pos += __command_name_len__;

    int32_t __group_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__group_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__group_len__ > maxlen - pos) return -1;
    this->group.assign(((const char*)buf) + offset + pos, __group_len__ - 1);
    pos += __group_len__;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->auto_respawn, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->stop_signal, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->stop_time_allowed, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_options, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->option_names.resize(this->num_options);
    for (int a0 = 0; a0 < this->num_options; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->option_names[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    this->option_values.resize(this->num_options);
    for (int a0 = 0; a0 < this->num_options; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->option_values[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    return pos;
}

int command2_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->exec_str.size() + 4 + 1;
    enc_size += this->command_name.size() + 4 + 1;
    enc_size += this->group.size() + 4 + 1;
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_options; a0++) {
        enc_size += this->option_names[a0].size() + 4 + 1;
    }
    for (int a0 = 0; a0 < this->num_options; a0++) {
        enc_size += this->option_values[a0].size() + 4 + 1;
    }
    return enc_size;
}

int64_t command2_t::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0xfc82ea7fd014c086LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
