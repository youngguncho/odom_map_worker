/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_procman;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class command2_t implements lcm.lcm.LCMEncodable
{
    public String exec_str;
    public String command_name;
    public String group;
    public boolean auto_respawn;
    public byte stop_signal;
    public float stop_time_allowed;
    public int num_options;
    public String option_names[];
    public String option_values[];
 
    public command2_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfc82ea7fd014c086L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_procman.command2_t.class))
            return 0L;
 
        classes.add(bot_procman.command2_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[this.exec_str.length()]; this.exec_str.getChars(0, this.exec_str.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.command_name.length()]; this.command_name.getChars(0, this.command_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.group.length()]; this.group.getChars(0, this.group.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.auto_respawn ? 1 : 0); 
 
        outs.writeByte(this.stop_signal); 
 
        outs.writeFloat(this.stop_time_allowed); 
 
        outs.writeInt(this.num_options); 
 
        for (int a = 0; a < this.num_options; a++) {
            __strbuf = new char[this.option_names[a].length()]; this.option_names[a].getChars(0, this.option_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_options; a++) {
            __strbuf = new char[this.option_values[a].length()]; this.option_values[a].getChars(0, this.option_values[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
    }
 
    public command2_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public command2_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_procman.command2_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_procman.command2_t o = new bot_procman.command2_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.exec_str = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.command_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.group = new String(__strbuf);
 
        this.auto_respawn = ins.readByte()!=0;
 
        this.stop_signal = ins.readByte();
 
        this.stop_time_allowed = ins.readFloat();
 
        this.num_options = ins.readInt();
 
        this.option_names = new String[(int) num_options];
        for (int a = 0; a < this.num_options; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.option_names[a] = new String(__strbuf);
        }
 
        this.option_values = new String[(int) num_options];
        for (int a = 0; a < this.num_options; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.option_values[a] = new String(__strbuf);
        }
 
    }
 
    public bot_procman.command2_t copy()
    {
        bot_procman.command2_t outobj = new bot_procman.command2_t();
        outobj.exec_str = this.exec_str;
 
        outobj.command_name = this.command_name;
 
        outobj.group = this.group;
 
        outobj.auto_respawn = this.auto_respawn;
 
        outobj.stop_signal = this.stop_signal;
 
        outobj.stop_time_allowed = this.stop_time_allowed;
 
        outobj.num_options = this.num_options;
 
        outobj.option_names = new String[(int) num_options];
        if (this.num_options > 0)
            System.arraycopy(this.option_names, 0, outobj.option_names, 0, this.num_options); 
        outobj.option_values = new String[(int) num_options];
        if (this.num_options > 0)
            System.arraycopy(this.option_values, 0, outobj.option_values, 0, this.num_options); 
        return outobj;
    }
 
}

