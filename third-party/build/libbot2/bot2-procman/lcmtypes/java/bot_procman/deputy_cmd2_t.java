/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_procman;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class deputy_cmd2_t implements lcm.lcm.LCMEncodable
{
    public bot_procman.command2_t cmd;
    public int pid;
    public int actual_runid;
    public int exit_code;
    public float cpu_usage;
    public long mem_vsize_bytes;
    public long mem_rss_bytes;
    public int sheriff_id;
 
    public deputy_cmd2_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0e86006ec5c7fbaaL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_procman.deputy_cmd2_t.class))
            return 0L;
 
        classes.add(bot_procman.deputy_cmd2_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + bot_procman.command2_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.cmd._encodeRecursive(outs); 
 
        outs.writeInt(this.pid); 
 
        outs.writeInt(this.actual_runid); 
 
        outs.writeInt(this.exit_code); 
 
        outs.writeFloat(this.cpu_usage); 
 
        outs.writeLong(this.mem_vsize_bytes); 
 
        outs.writeLong(this.mem_rss_bytes); 
 
        outs.writeInt(this.sheriff_id); 
 
    }
 
    public deputy_cmd2_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public deputy_cmd2_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_procman.deputy_cmd2_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_procman.deputy_cmd2_t o = new bot_procman.deputy_cmd2_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.cmd = bot_procman.command2_t._decodeRecursiveFactory(ins);
 
        this.pid = ins.readInt();
 
        this.actual_runid = ins.readInt();
 
        this.exit_code = ins.readInt();
 
        this.cpu_usage = ins.readFloat();
 
        this.mem_vsize_bytes = ins.readLong();
 
        this.mem_rss_bytes = ins.readLong();
 
        this.sheriff_id = ins.readInt();
 
    }
 
    public bot_procman.deputy_cmd2_t copy()
    {
        bot_procman.deputy_cmd2_t outobj = new bot_procman.deputy_cmd2_t();
        outobj.cmd = this.cmd.copy();
 
        outobj.pid = this.pid;
 
        outobj.actual_runid = this.actual_runid;
 
        outobj.exit_code = this.exit_code;
 
        outobj.cpu_usage = this.cpu_usage;
 
        outobj.mem_vsize_bytes = this.mem_vsize_bytes;
 
        outobj.mem_rss_bytes = this.mem_rss_bytes;
 
        outobj.sheriff_id = this.sheriff_id;
 
        return outobj;
    }
 
}

