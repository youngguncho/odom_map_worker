/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_procman;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class printf_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String deputy_name;
    public int sheriff_id;
    public String text;
 
    public printf_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x855d6226c71d3dd6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_procman.printf_t.class))
            return 0L;
 
        classes.add(bot_procman.printf_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.deputy_name.length()]; this.deputy_name.getChars(0, this.deputy_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.sheriff_id); 
 
        __strbuf = new char[this.text.length()]; this.text.getChars(0, this.text.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public printf_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public printf_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_procman.printf_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_procman.printf_t o = new bot_procman.printf_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.deputy_name = new String(__strbuf);
 
        this.sheriff_id = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.text = new String(__strbuf);
 
    }
 
    public bot_procman.printf_t copy()
    {
        bot_procman.printf_t outobj = new bot_procman.printf_t();
        outobj.utime = this.utime;
 
        outobj.deputy_name = this.deputy_name;
 
        outobj.sheriff_id = this.sheriff_id;
 
        outobj.text = this.text;
 
        return outobj;
    }
 
}

