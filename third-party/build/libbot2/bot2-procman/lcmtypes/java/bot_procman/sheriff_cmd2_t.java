/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_procman;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class sheriff_cmd2_t implements lcm.lcm.LCMEncodable
{
    public bot_procman.command2_t cmd;
    public int desired_runid;
    public byte force_quit;
    public int sheriff_id;
 
    public sheriff_cmd2_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc749fe5a5de67849L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_procman.sheriff_cmd2_t.class))
            return 0L;
 
        classes.add(bot_procman.sheriff_cmd2_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + bot_procman.command2_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.cmd._encodeRecursive(outs); 
 
        outs.writeInt(this.desired_runid); 
 
        outs.writeByte(this.force_quit); 
 
        outs.writeInt(this.sheriff_id); 
 
    }
 
    public sheriff_cmd2_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public sheriff_cmd2_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_procman.sheriff_cmd2_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_procman.sheriff_cmd2_t o = new bot_procman.sheriff_cmd2_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.cmd = bot_procman.command2_t._decodeRecursiveFactory(ins);
 
        this.desired_runid = ins.readInt();
 
        this.force_quit = ins.readByte();
 
        this.sheriff_id = ins.readInt();
 
    }
 
    public bot_procman.sheriff_cmd2_t copy()
    {
        bot_procman.sheriff_cmd2_t outobj = new bot_procman.sheriff_cmd2_t();
        outobj.cmd = this.cmd.copy();
 
        outobj.desired_runid = this.desired_runid;
 
        outobj.force_quit = this.force_quit;
 
        outobj.sheriff_id = this.sheriff_id;
 
        return outobj;
    }
 
}

